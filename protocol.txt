The Definition of the protocol used for UDP communication.

From the streamer to the receiver (Port 8051):

- frame number (now change to have this first)

- captured timestamp (now change to be here in the front)

- captured pose of camera (now change to be the second and before image data)
  * Format: Same as incoming VR Head Pose Data (28 bytes)
  * Coordinates: Unity world coordinates (matching the input pose)
  * Purpose: Returns the exact pose used for rendering the frame

- Color JPEG Image Data (streamed at ~30 FPS / every 33ms):
  * Image Resolution: 500x500 pixels
  * Format: RGB24 (3 channels, 8 bits per channel)
  * Compression: JPEG with quality level 75 (0-100 scale)
  * Encoding: STB Image Write library (stbi_write_jpg_to_func)
  
  UDP Packet Structure (fragmented for large frames):
  * Header (13 bytes, network byte order):
    - frameId (4 bytes): uint32_t frame counter
    - chunkIndex (4 bytes): uint32_t current chunk number (0-based)
    - totalChunks (4 bytes): uint32_t total chunks for this frame
    - dataType (1 byte): uint8_t (0 = JPEG color image, 1 = depth data)
  
  * Payload: JPEG compressed image data chunk
  * Max UDP packet size: 1400 bytes
  * Max payload per packet: 1387 bytes (1400 - 13 header bytes)
  * Inter-chunk delay: 100 microseconds (for multi-chunk frames)


- Depth Buffer Data (streamed at ~30 FPS / every 33ms):
  * Image Resolution: 1500x1500 pixels
  * Format: 8-bit unsigned integers (single byte per pixel)
  * Values: Depth scaled to 8-meter range
    - 0 = invalid/infinite depth (sky/background)
    - 1-255 = valid depth scaled from 0-8000mm (0-8 meters)
    - Values beyond 8 meters are clamped to 255 in C++ streamer
  * Conversion: From 1/z depth buffer to world space distance, scaled to 8m range
  * Data size: 2,250,000 bytes per frame (1500 x 1500 x 1 byte)
  * Precision: ~31.37mm per step (8000mm / 255 steps)
  
  Unity Texture Format: R8 (8-bit single channel) or RGB24 (for visualization)
  - Each texel represents depth scaled to 8-meter range
  - Normalized range: 0.0 (0mm) to 1.0 (8000mm)
  - For shader use: texture_value * 8000.0 = depth_in_millimeters
  
  UDP Packet Structure (same header as JPEG):
  * Header (13 bytes, network byte order):
    - frameId (4 bytes): uint32_t frame counter
    - chunkIndex (4 bytes): uint32_t current chunk number (0-based)
    - totalChunks (4 bytes): uint32_t total chunks for this frame
    - dataType (1 byte): uint8_t (1 = raw 8-bit depth buffer)
  
  * Payload: Raw binary depth data (8-bit values, 1 byte per pixel)
  * Fragmentation: Depth frames split across multiple packets



From the VR receiver to the streamer (PORT 8052):

- VR Head Pose Data (28 bytes total, sent at 10 Hz / every 100ms):
  * Position (12 bytes): 3 x float32 (X, Y, Z in Unity world coordinates)
  * Rotation (16 bytes): 4 x float32 (Quaternion X, Y, Z, W components in Unity world coordinates)
  
  Binary format (little-endian):
  Bytes 0-3:   Position.X (float32)
  Bytes 4-7:   Position.Y (float32) 
  Bytes 8-11:  Position.Z (float32)
  Bytes 12-15: Rotation.X (float32)
  Bytes 16-19: Rotation.Y (float32)
  Bytes 20-23: Rotation.Z (float32)
  Bytes 24-27: Rotation.W (float32)
  
  Note: All pose data is transmitted and received in Unity world coordinates.
        The coordinate system is maintained consistently throughout the
        pipeline to ensure accurate 6DoF camera pose tracking.

- Field of View (in future)

- IPD (in future)

Control Commands:

Streamer (C++) Controls:
- P key: Toggle packet transmission pause/resume
- T key: Toggle VR tracking mode on/off
- V key: Toggle depth buffer visualization on/off
- I key: Toggle depth map inversion on/off
- X, Y, Z keys: Toggle VR rotation axis inversions (pitch, yaw, roll)
- Q, E, R keys: Toggle VR position axis inversions (X, Y, Z)

Unity Receiver Controls:
- P key (configurable): Toggle packet transmission pause/resume
- Public methods: PauseStreaming(), ResumeStreaming(), ToggleStreamingPause()
- Inspector checkbox: Manual streaming pause control

When paused:
- C++ streamer: Stops sending color/depth data packets
- Unity receiver: Stops sending pose data packets and processing received images
- Both systems continue running but skip packet transmission/processing
- Received packets are still dequeued to prevent memory buildup
